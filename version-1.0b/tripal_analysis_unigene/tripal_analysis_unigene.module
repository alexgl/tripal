<?php
// $Id:
//
// Copyright 2009 Clemson University
//
/*******************************************************************************
 * tripal_analysis_unigene_nodeapi()
 * HOOK: Implementation of hook_nodeapi()
 * Display unigene results for allowed node types
 */
function tripal_analysis_unigene_nodeapi(&$node, $op, $teaser, $page) {

   switch ($op) {
      case 'view':
         // Find out which node types for showing the unigene
         $types_to_show = variable_get('tripal_analysis_unigene_setting',
            array('chado_feature'));

         // Abort if this node is not one of the types we should show.
         if (!in_array($node->type, $types_to_show, TRUE)) {
            break;
         }

         // Add unigene to the content item if it's not a teaser
         if (!$teaser) {
            // add the alignment to the feature search indexing
            if($node->build_mode == NODE_BUILD_SEARCH_INDEX){
               $node->content['tripal_analysis_unigene_index_version'] = array(
						'#value' => theme('tripal_analysis_unigene_search_index',$node),
						'#weight' => 4,
               );
            } else if ($node->build_mode == NODE_BUILD_SEARCH_RESULT) {
               $node->content['tripal_analysis_unigene_index_version'] = array(
						'#value' => theme('tripal_analysis_unigene_search_result',$node),
						'#weight' => 4,
               );
            } else {
               // Show unigene result if not at teaser view
               $node->content['tripal_analysis_unigene_form'] = array(
						'#value' => theme('tripal_analysis_unigene_results', $node),
						'#weight' => 4
               );
            }

         }
   }
}
/************************************************************************
 *  We need to let drupal know about our theme functions and their arguments.
 *  We create theme functions to allow users of the module to customize the
 *  look and feel of the output generated in this module
 */
function tripal_analysis_unigene_theme () {
   return array(
      'tripal_analysis_unigene_search_index' => array (
         'arguments' => array('node'),
      ),
      'tripal_analysis_unigene_search_result' => array (
         'arguments' => array('node'),
      ),
      'tripal_analysis_unigene_results' => array (
         'arguments' => array('node'),
      )
   );
}
/************************************************************************
 *  This function is an extension of the chado_feature_view by providing
 *  the markup for the feature object THAT WILL BE INDEXED.
 */
function theme_tripal_analysis_unigene_search_index ($node) {

   $feature = $node->feature;
   $obj_feature = tripal_get_unigene_results($feature);
   $alignments = $obj_feature->alignments;
   $content = "<strong>";
   if(count($alignments) > 0){
      // iterate through each alignment
      foreach ($alignments as $result){
         // EST alignments in chado use an EST_match type to map ESTs to
         // contigs and a rank to indicate the major srcfeature.
         // We don't want to show EST_matches on the alignment view
         // since that doesn't make much sense to the end user.  If this
         // is an EST_match and the feature is an EST then we want to show
         // the contig in the alignments.  The contig name is part of the
         // uniquename in the EST_match
         if($node->feature->cvname == 'EST' && $result->cvname == 'EST_match'){
            $sql = "SELECT srcfeature_id ".
                   "FROM featureloc ".
                   "WHERE feature_id = $result->feature_id ".
                   "ORDER BY rank";
            $previous_db = db_set_active ('chado');
            $contig_fid = db_result(db_query($sql));
            $sql = "SELECT name FROM feature WHERE feature_id = $contig_fid";
            $contig_name = db_result(db_query($sql));
            db_set_active($previous_db);
            $sql = "SELECT nid ".
                   "FROM {chado_feature} ".
                   "WHERE feature_id = $contig_fid";
            $contig_nid = db_result(db_query($sql));
            // Check if the EST exists as a drupal node. If yes, add a link to
            // it. If no, just show the name
            if ($contig_nid != 0) {
               $sql = "SELECT nid FROM {node} WHERE nid=$contig_nid";
               $node_exists = db_result(db_query($sql));
            }
            $content .= "$contig_name " ;
         }
         elseif($node->feature->cvname == 'contig' && $result->cvname == 'EST_match'){
            $sql = "SELECT vid ".
                   "FROM {node} ".
                   "WHERE title = '$result->feature_name'".
                   "ORDER BY vid DESC";
            // since the feature name is also the node title we can look it up
            $est_node = db_fetch_object(db_query($sql));
            $content .= "$result->feature_name ";
         }
         else {
            $content .= "$result->cvname $result->feature_name ";
         }
      }
   }
   $content .= "</strong>";
   return $content;
}

/************************************************************************
 *  This function is an extension of the chado_feature_view by providing
 *  the markup for the feature object to show on a search result page.
 */
function theme_tripal_analysis_unigene_search_result ($node) {

   $feature = $node->feature;
   $obj_feature = tripal_get_unigene_results($feature);
   $alignments = $obj_feature->alignments;
   $content = "<strong>";
   if(count($alignments) > 0){
      // iterate through each alignment
      foreach ($alignments as $result){
         // EST alignments in chado use an EST_match type to map ESTs to
         // contigs and a rank to indicate the major srcfeature.
         // We don't want to show EST_matches on the alignment view
         // since that doesn't make much sense to the end user.  If this
         // is an EST_match and the feature is an EST then we want to show
         // the contig in the alignments.  The contig name is part of the
         // uniquename in the EST_match
         if($node->feature->cvname == 'EST' && $result->cvname == 'EST_match'){
            $sql = "SELECT srcfeature_id ".
                   "FROM featureloc ".
                   "WHERE feature_id = $result->feature_id ".
                   "ORDER BY rank";
            $previous_db = db_set_active ('chado');
            $contig_fid = db_result(db_query($sql));
            $sql = "SELECT name FROM feature WHERE feature_id = $contig_fid";
            $contig_name = db_result(db_query($sql));
            db_set_active($previous_db);
            $sql = "SELECT nid ".
                   "FROM {chado_feature} ".
                   "WHERE feature_id = $contig_fid";
            $contig_nid = db_result(db_query($sql));
            // Check if the EST exists as a drupal node. If yes, add a link to
            // it. If no, just show the name
            if ($contig_nid != 0) {
               $sql = "SELECT nid FROM {node} WHERE nid=$contig_nid";
               $node_exists = db_result(db_query($sql));
            }
            $content .= "Alignment to contig $contig_name. " ;
         }
         elseif($node->feature->cvname == 'contig' && $result->cvname == 'EST_match'){
            $sql = "SELECT vid ".
                   "FROM {node} ".
                   "WHERE title = '$result->feature_name'".
                   "ORDER BY vid DESC";
            // since the feature name is also the node title we can look it up
            $est_node = db_fetch_object(db_query($sql));
            $content .= "Aligned EST: $result->feature_name ";
         }
         else {
            $content .= "Aligned $result->cvname: $result->feature_name ";
         }
      }
   }
   $content .= "</strong>";
   return $content;
}

/*******************************************************************************
 * tripal_analysis_unigene_results ()
 * Prepare unigene result for the feature shown on the page
 */
function theme_tripal_analysis_unigene_results($node) {
   $feature = $node->feature;
   $obj_feature = tripal_get_unigene_results($feature);
   $alignments = $obj_feature->alignments;
   if(count($alignments) > 0){
      $content = "<div id=\"unigene-alignments\" class=\"unigene-info-box\">";
      // we're showing contig alignments in GBrowse so create a link here for
      // that if this feature is a contig
      if($node->feature->cvname == 'contig'){
         $content .= "<div class=\"tripal_expandableBox\">".
                     "  <h3>ESTs in this contig</h3>".
                     "</div>";
         $content .= "<div class=\"tripal_expandableBoxContent\">";
      } else {
         $content .= "<div class=\"tripal_expandableBox\">".
                     "  <h3>Alignments</h3>".
                     "</div>";
         $content .= "<div class=\"tripal_expandableBoxContent\">";
      }
      $content .= "".
         "<table class=\"tripal_table_horz\">".
         "  <tr>".
         "    <th>Type</th>".
         "    <th>Feature</th>".
         "    <th align=\"right\">Position</th>".
         "  </tr>";
      // iterate through each alignment
      foreach ($alignments as $result){
         // EST alignments in chado use an EST_match type to map ESTs to
         // contigs and a rank to indicate the major srcfeature.
         // We don't want to show EST_matches on the alignment view
         // since that doesn't make much sense to the end user.  If this
         // is an EST_match and the feature is an EST then we want to show
         // the contig in the alignments.  The contig name is part of the
         // uniquename in the EST_match
         if($node->feature->cvname == 'EST' && $result->cvname == 'EST_match'){
            $sql = "SELECT srcfeature_id ".
                   "FROM featureloc ".
                   "WHERE feature_id = $result->feature_id ".
                   "ORDER BY rank";
            $previous_db = db_set_active ('chado');
            $contig_fid = db_result(db_query($sql));
            $sql = "SELECT name FROM feature WHERE feature_id = $contig_fid";
            $contig_name = db_result(db_query($sql));
            db_set_active($previous_db);
            $sql = "SELECT nid ".
                   "FROM {chado_feature} ".
                   "WHERE feature_id = $contig_fid";
            $contig_nid = db_result(db_query($sql));
            // Check if the EST exists as a drupal node. If yes, add a link to
            // it. If no, just show the name
            if ($contig_nid != 0) {
               $sql = "SELECT nid FROM {node} WHERE nid=$contig_nid";
               $node_exists = db_result(db_query($sql));
            }
            $content .=
              "<tr>".
              "  <td>Contig</td>".
              "  <td>";
            if ($node_exists != 0) {
               $content .= "<a href=\"".url("node/$contig_nid")."\">".
              	     	   "$contig_name</a>";
            } else {
               $content .= $contig_name;
            }
            $content .=
              "  </td>".
              "  <td align=\"right\">".
            number_format($result->fmin).
                   "-".
            number_format($result->fmax).
              "  </td>".
              "</tr>";
         }

         elseif($node->feature->cvname == 'contig' &&
         $result->cvname == 'EST_match'){
            $sql = "SELECT vid ".
                   "FROM {node} ".
                   "WHERE title = '$result->feature_name'".
                   "ORDER BY vid DESC";
            // since the feature name is also the node title we can look it up
            $est_node = db_fetch_object(db_query($sql));
            $content .=
              "<tr>".
              "  <td>EST</td>".
              "  <td>";
            //Check if the EST exists as a drupal node before adding a hyperlink
            if ($est_node->vid != 0) {
               $content .=
               	 "<a href=\"".url("node/$est_node->vid")."\">".
               $result->feature_name.
              	 "</a>";
            } else {
               $content .= $result->feature_name;
            }
            $content .=
              "  </td>".
              "  <td align=\"right\">".
            number_format($result->fmin).
                   "-".
            number_format($result->fmax).
              "  </td>".
              "</tr>";
         }
         else {
            $content .= "".
              "<tr>".
              "  <td>$result->cvname</td>".
              "  <td>$result->feature_name</td>".
              "  <td align=\"right\">$result->fmin</td>".
              "  <td align=\"right\">$result->fmax</td>".
              "  <td align=\"right\">$result->strand</td>".
              "</tr>";
         }
      }
      $content .= "</table>";

      /* if this is a contig then get the alignment
       if($node->feature->cvname == 'contig'){
       // get the directory prefix
       $prefix = preg_replace("/^(\d*)\d{3}$/","$1",$node->feature_id);
       if(!$prefix){
       $prefix = '0';
       }
       $data_url = variable_get('chado_feature_data_url','sites/default/files/data');
       $fh = fopen("$data_url/misc/$prefix/$node->feature->feature_id/alignment.txt", 'r');
       if($fh){
       $content .= "<b>Alignment:</b><div class=\"tripal_feature_assembly_alignment\"><pre>";
       while(!feof($fh)){
       $content .= fgets($fh);
       }
       $content .="</pre></div>";
       }
       fclose($fh);
       }
       */
      $content .= "</div></div>";
   }
   return $content;
}

function tripal_get_unigene_results($map) {

   // get the alignments for this feature
   $sql = "SELECT F.name as feature_name, FL.fmin, FL.fmax, FL.strand, ".
          "  FL.phase, CVT.name as cvname, F.feature_id, F.uniquename, ".
          "  FL.featureloc_id ".
          "FROM featureloc FL ".
          "  INNER JOIN Feature F ON F.feature_id = FL.feature_id ".
          "  INNER JOIN Cvterm CVT ON CVT.cvterm_id = F.type_id ".
          "WHERE srcfeature_id = %d AND ".
          "  NOT(CVT.name = 'match' or CVT.name = 'match_part') ".
          "ORDER BY FL.fmin, FL.fmax";
   $previous_db = db_set_active('chado');
   $results = db_query($sql,$map->feature_id);
   $alignments = array();
   $i=0;
   while($subfeature = db_fetch_object($results)){
      $alignments[$i++] = $subfeature;
   }
   $additions->alignments = $alignments;

   /* get the GO Terms
    $sql = "SELECT DISTINCT * FROM go_results_mview ".
    "WHERE feature_id = %d";
    $results = db_query($sql,$map->feature_id);
    $go_terms = array();
    $i=0;
    while($term = db_fetch_object($results)){
    $go_terms[$i++] = $term;
    }
    $additions->go_terms = $go_terms;

    // get the feature properties
    $sql = "SELECT FP.value,FP.rank,CVT.name,CVT.definition ".
    "FROM featureprop FP".
    "  INNER JOIN Cvterm CVT ".
    "    ON FP.type_id = CVT.cvterm_id ".
    "WHERE feature_id = %d";
    $results = db_query($sql,$map->feature_id);
    $properties = array();
    $i=0;
    while($property = db_fetch_object($results)){
    $properties[$i++] = $property;
    }
    $additions->properties = $properties;
    */
   db_set_active($previous_db);
   return $additions;
}

/*******************************************************************************
 * Tripal Unigene administrative setting form. This function is called by
 * tripal_analysis module which asks for an admin form to show on the page
 */
function tripal_analysis_unigene_get_settings() {
   // Get an array of node types with internal names as keys
   $options = node_get_types('names');
   // Add 'chado_feature' to allowed content types for showing unigene results
   $allowedoptions ['chado_feature'] = "Turn on/off Tripal Unigene.";

   $form['description'] = array(
       '#type' => 'item',
       '#value' => t("Some chado features were assembled into unigene. This option allows user to display the unigene assembly information. Check the box to enable the display of unigene information. Uncheck to disable it."),
		 '#weight' => 0,
   );

   $form['tripal_analysis_unigene_setting'] = array(
      '#type' => 'checkboxes',
      '#options' => $allowedoptions,
      '#default_value' => variable_get('tripal_analysis_unigene_setting',
                          array('chado_feature')),
   );
   $settings->form = $form;
   $settings->title = "Tripal Unigene";
   return $settings;
}
