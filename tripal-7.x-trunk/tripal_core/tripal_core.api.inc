<?php

/**
 * Retrieves the title of any chado entity
 *
 * Note: if it exists the title will be generated by a function of the form 
 * chado_get_<chado type>_title($chado_id) which should be implemented by the module
 * implementing that chado type
 *
 * @param $chado_type
 *   The type of chado entity
 * @param $chado_id
 *   The chado primary key of the chado entity
 * @return
 *   the title of the entity
 */
function chado_get_title($chado_type,$chado_id) {
  $hook = 'chado_get_'.$chado_type.'_title';
  if (function_exists($hook)) {
    return $hook($chado_id);
  } else {
    //determine which chado table and field to use for the title
    $chado_info = db_select('chado_type' ,'ct')
      ->fields('ct', array('chado_table','title_field'))
      ->condition('type',$chado_type)
      ->execute()
      ->fetchAssoc();
    
    if (!empty($chado_info['chado_table']) && !empty($chado_info['title_field'])) {
      // get the title from chado table
      $previous_db = db_set_active('chado');
      $title = db_select($chado_info['chado_table'], 'c')
        ->fields('c', array($chado_info['title_field']))
        ->condition($chado_info['chado_table'].'_id',$chado_id)
        ->execute()
        ->fetchField(0);
      db_set_active($previous_db);
      return $title;
    } else {
      return $chado_id.' ('.$chado_type.')';
    }
  }
}

/**
 * Retrieve the description of any chado content type
 *
 * @param $content_type
 *   The all lower case name of the content type (ie: default, feature, stock, etc.)
 * @return
 *   The text description of that content type 
 *   as returned from chado_get_<content_type>_type_description()
 */
function chado_get_content_type_description ($content_type) {
  $function = 'chado_get_'.$content_type.'_type_description';
  if (function_exists($function)) {
    return $function();
  } else {
    return '';
  }
}


///////////////////////////////////////////////////////////////////////////////////////////////
// Manage Content Types
///////////////////////////////////////////////////////////////////////////////////////////////


function chado_type_save ($info) {
  
  if (is_array($info)) { $info = (object)$info; }

  $existing_type = $info->type;
  $is_existing = (bool) db_query_range('SELECT 1 FROM {chado_type} WHERE type = :type', 0, 1, array(':type' => $existing_type))->fetchField();

  $user_type = (array) $info;
  $fields = $user_type + array(
    'type' => '',
    'name' => '',
    'chado_table' => '',
    'title_field' => '',
    'description' => '',
    'help' => '',
    'custom' => 0,
    'module' => '',
  );
  
  if ($is_existing) {
    //Update
    db_update('chado_type')
      ->fields($fields)
      ->condition('type', $existing_type)
      ->execute();
      drupal_set_message('Successfully updated Chado content type '.$existing_type.'.');
    $status = SAVED_UPDATED;
  } else {
    //Insert
    db_insert('chado_type')
      ->fields($fields)
      ->execute();

    field_attach_create_bundle('chado', $fields['type']);
    drupal_set_message('Successfully created Chado content type '.$existing_type.'.');
    $status = SAVED_NEW;    
  }

  drupal_static_reset('entity_get_info');
  cache_clear_all('entity_info:', 'cache', TRUE);

  return $status;
}


/**
 * Removes a chado content type
 *
 * @param $name
 *   The machine name of the bundle (ie: feature, stock, etc.)
 * @return
 *   1 on successful delete; 2 if content type didn't exist
 */
function chado_type_delete($name) {

  $is_existing = (bool) db_query_range('SELECT 1 FROM {chado_type} WHERE type = :type', 0, 1, array(':type' => $name))->fetchField();

  if ($is_existing) {
    db_delete('chado_type')
      ->condition('type',$name)
      ->execute();
    drupal_set_message('Successfully removed Chado content type '.$name.'.');
    $status = 1;
  } else {
    drupal_set_message('Chado content type '.$name.' doesn\'t exist.');
    $status = 2;
  }

  drupal_static_reset('entity_get_info');
  cache_clear_all('entity_info:', 'cache', TRUE);

  return $status;
}
